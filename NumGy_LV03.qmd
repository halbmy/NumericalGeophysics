---
title: "Numerical Simulation Methods in Geophysics, Part 3: FD  Implementation"
subtitle: "1. MGPY+MGIN, 3. MDRS+MGEX-CMG"
author: "thomas.guenther@geophysik.tu-freiberg.de"
title-slide-attributes:
  data-background-image: pics/tubaf-logo.png
  data-background-size: 20%
  data-background-position: 10% 95%
format:
  tubaf-revealjs:
    html-math-method: mathjax
    chalkboard: true
    include-in-header:
        - text: |
            <script>
            window.MathJax = {
            loader: {
                load: ['[tex]/physics']
            },
            tex: {
                packages: {'[+]': ['physics']}
            }
            };
            </script>
    slide-number: c/t
    transition: slide
    transition-speed: fast
    menu: 
      side: left
# jupyter: python3 
--- 

# Recap and exercise

## Task: solve Poisson equation

$$\div(a\grad u)=f$$

(stationary) potential field, e.g., temperature, flux, current

simplest method: Finite differences

FD: Approximate derivative operators by differences using finite values $u_i$ at points $x_i$, e.g. a 

## Unit solution

2nd derivative $[+1, -2, +1]$ $\Rightarrow$ $\vb{A}\cdot\vb{u}=\vb{f}$ with the stiffness matrix

$$ \vb{A} = \begin{bmatrix}   
+1 & -2 & +1 & 0 & \ldots & &  \\
0 & +1 & -2 & +1 & 0 & \ldots & \\
\vdots & \vdots & \vdots & \ddots & \vdots &  \\
\ldots & \ldots & 0 & +1 & -2 & +1
\end{bmatrix}  $$

## Finite difference stencil

```{python}
#| output-location: column-fragment
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 3)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot(2, 1, "ro", ms=12)
```

compute each value (red) with the help of its neighbors (blue)

## Dirichlet boundary conditions
$u_B - 2 u_1 + u_3 = f_1$

$$ \begin{bmatrix}   
-2 & +1 & 0 & \ldots & &  \\
+1 & -2 & +1 & 0 & \ldots & \\
\vdots & \vdots & \ddots & \vdots &  \\
\ldots & 0 & +1 & -2 & +1
\end{bmatrix} \cdot\vb{u} = 
\begin{bmatrix} f_1 - u_B\\ f_2 \\ \vdots \\ f_N \end{bmatrix} $$

no change in coefficients, $u_B$ on rhs act as outer source

## Neumann boundary conditions
$$u_0 - 2 u_1+u_2 = f_1 \qquad u_1 - u_0 = g_B \Rightarrow u_2-u_1=f_1+g_B $$ 
<!-- $-u_1 + u_2 = f_1 - g_B$ -->

$$ \begin{bmatrix}   
-1 & +1 & 0 & \ldots & &  \\
+1 & -2 & +1 & 0 & \ldots & \\
\vdots & \vdots & \ddots & \vdots &  \\
\ldots & 0 & +1 & -2 & +1
\end{bmatrix} \cdot\vb{u} = 
\begin{bmatrix} f_1 + g_B\\ f_2 \\ \vdots \\ f_N \end{bmatrix} $$

change in self-coupling, $g_B$ on rhs adds to source

## Tasks

1. Create a stiffness matrix for unit quantities
1. Implement Dirichlet BC on one and Neumann on other side
1. Solve system for different right-hand sides:
    * no source at all
    * single source in the middle or at the boundary
    * several sources with different strengths (& signs)
    * source on part of the domain
1. Alwas plot the solution and itsLaplacian

## The general case

$\Delta x \ne 1$ & $a \ne 1$

$a \pdv{u}{x}$

```{python}
#| output-location: column-fragment
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
nx = 6
grid = mt.createGrid(nx, 2)
ax, cb = pg.show(grid)
ax.set_yticks([])
for i in range(nx):
    ax.plot(i, 0, "ko", ms=10)
for i in range(nx-1):
    ax.text(i+0.5, 0.5, rf"$a_{i}$", ha="center", va="center", fontsize=18)
```

## Tasks 

1. Derive the coefficients for the general case
1. Write a function implementing the general case
1. Divide the "subsurface" in regions with different $a$
1. Compute the solution for different source fields
1. Use a non-equidistant discretisation
1. Always plot solution along with source and Laplacian

# Parabolic PDEs

## Heat transfer in 1D
$$ \pdv{T}{t} - a \pdv[2]{T}{z} = 0 $$

with the periodic boundary conditions:
* $T(z=0,t)=T_0 + \Delta T \sin \omega t$ (daily/yearly cycle)
* $\pdv{T}{z}(z=z_1) = 0$ (no change at depth)
and the initial condition $T(z, t=0)=\sin \pi z$ has the analytical solution
$$ T(z, t) = \Delta T e^{-\pi^2 t} \sin \pi z $$

## FD stencil

```{python}
#| output-location: column-fragment
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "b-", lw=4)
ax.plot(2, 2, "ro", ms=12)
```

## Explicit methods

$$ \pdv{T}{t} - a \pdv[2]{T}{z} = 0 $$

Finite-difference approximation

$$ \pdv{T}{t}^n \approx \frac{T^{n+1}-T^n}{\Delta t} = a \pdv[2]{T}{z} ^n $$

## Explicit

Solve Poisson equation $\div(a\grad u)=f$ 

for every time step $i$ (using FDM, FEM, FVM etc.)

Finite-difference step in time: update field by 
$$ T_{i+1} = T_i + a \pdv[2]{u}{z} \cdot \Delta t$$

## Implicit methods

$$ \pdv{T}{t}^n \approx \frac{T^{n+1}-T^n}{\Delta t} = a \pdv[2]{T}{z} ^{n+1} $$

```{python}
#| output-location: column-fragment
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [2, 2, 2], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "bo-", ms=12, lw=4)
ax.plot(2, 2, "ro", ms=12)
```

## Mixed - Crank-Nicholson method

$$ \pdv{T}{t}^n \approx \frac{T^{n+1}-T^n}{\Delta t} = \frac12 a \pdv[2]{T}{z} ^n + \frac12 a \pdv[2]{T}{z} ^{n+1} $$


```{python}
#| output-location: column-fragment
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot([1, 2, 3], [2, 2, 2], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "bo-", ms=12, lw=4)
ax.plot(2, 2, "ro", ms=12)
```
