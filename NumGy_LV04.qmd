---
title: "Numerical Simulation Methods in Geophysics, Part 4: The heat equation"
subtitle: "1. MGPY+MGIN"
author: "thomas.guenther@geophysik.tu-freiberg.de"
title-slide-attributes:
  data-background-image: pics/tubaf-logo.png
  data-background-size: 20%
  data-background-position: 10% 95%
format:
  tubaf-revealjs:
    html-math-method: mathjax
    chalkboard: true
    include-in-header:
        - text: |
            <script>
            window.MathJax = {
            loader: {
                load: ['[tex]/physics']
            },
            tex: {
                packages: {'[+]': ['physics']}
            }
            };
            </script>
    slide-number: c/t
    transition: slide
    transition-speed: fast
    menu: 
      side: left
# jupyter: python3 
--- 

# Recap last lessons & exercises

## Poisson equation

$$\div(a\grad u)=f$$

(stationary) potential field, e.g., temperature, flux, current

```{python}
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 3)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot(2, 1, "ro", ms=12)
```

compute each value (red) with the help of its neighbors (blue)

## Boundary conditions (Dirichlet, Neumann)

* remove outside value and move to RHS
* adjust self-coupling coefficient

## Tasks (1) - done

1. Create a stiffness matrix for unit quantities
1. Implement Dirichlet BC on one and Neumann on other side
1. Solve system for different right-hand sides:
    * no source at all
    * single source in the middle or at the boundary
    * several sources with different strengths (& signs)
    * source on part of the domain
1. Alwas plot the solution and its Laplacian

## The general case

$\Delta x \ne 1$ & $a \ne 1$ $\Rightarrow$ $a \pdv{u}{x} \approx a_i\frac{u_{i+1}-u_i}{x_{i+1}-x_i}$

```{python}
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
nx = 6
grid = mt.createGrid(nx, 2)
ax, cb = pg.show(grid)
ax.set_yticks([])
for i in range(nx):
    ax.plot(i, 0, "ko", ms=10)
for i in range(nx-1):
    ax.text(i+0.5, 0.5, rf"$a_{i}$", ha="center", va="center", fontsize=18)
```

$\dv{x}(a \pdv{u}{x}) \approx (a_i\frac{u_{i+1}-u_i}{x_{i+1}-x_i} - a_{i-1}\frac{u_{i}-u_{i-1}}{x_{i}-x_{i-1}}) / (x_{i+1}-x_{i-1}) \cdot 2$

$$ A_{i, i-1} = a_{i-1} / (x_{i}-x_{i-1}) / (x_{i+1}-x_{i-1}) \cdot 2 $$

## The coupling coefficients

$$ C_{left} = a_{i-1} / (x_{i}-x_{i-1}) / (x_{i+1}-x_{i-1}) \cdot 2 $$

$$ C_{right} = a_{i+1} / (x_{i+1}-x_{i}) / (x_{i+1}-x_{i-1}) \cdot 2 $$

$$ \begin{bmatrix}   
+1 & 0 & 0 & \ldots & &  \\
C_1^L & -(C_1^L+C_1^R) & C_1^R & 0 & \ldots & \\
\vdots & \vdots & \ddots & \vdots &  \\
\ldots & \ldots & 0 & C_N^L & -(C_N^L+C_N^R) & C_N^R \\
\ldots & \ldots & & 0 & -1 & +1
\end{bmatrix} \cdot\vb{u} = 
\begin{bmatrix} u_B\\ f_1 \\ \vdots \\ f_N \\ g_B \end{bmatrix}  $$

## Tasks (2)

1. Derive the coefficients for the general case
1. Write a function implementing the general case
1. Divide the "subsurface" in regions with different $a$
1. Compute the solution for different source fields
1. Use a non-equidistant discretisation
1. Always plot solution along with source and Laplacian

## Next spatial dimension

::: {.r-stack}
![Simple 2D conductivity grid](notebooks/grid32sigma.svg)

![Simple 2D conductivity grid with FD stencil](notebooks/grid32sigmaStencil.svg){.fragment}
:::

# Parabolic PDEs

## Heat flow in 1D

:::: {.columns}
::: {.column width="60%"}

temperature gradient $\Delta T$ $\Rightarrow$ heat flow

$$ Q/\Delta t = \frac{k A}{L} \Delta T $$

$$\vb q = -\frac1A \pdv{Q}{t} = - k \pdv{T}{z} $$

cannot disappear (divergence 0)

$$\div\vb q = -\div (k \grad T) = 0$$

:::
::: {.column width="40%"}
![](pics/heatResistor.png)

* $T$ [K], $A$ [m²], $L$ [m]
* $Q$ [J/m/K], $q$ [W/m²]
* $k$ [W/m] thermal conductivity

:::
::::

## Heat sources

E.g. radioactive elements, heat elements or sinks

$$ \div (\vb q + \vb q_s) = 0 $$

$$ \div \vb q = - \div a \grad T = - \div \vb q_s $$

## Heat conduction equation

:::: {.columns}
::: {.column width="50%"}
$$ \dv{Q_z}{z} \dd z = \dv{Q_z}{z} \dd z \dd x \dd y \dd t = k \dv[2]{T}{z} \dd V \dd t $$

with the heat capacity $c_p$ [W/kg/K]
$$ c_p m \dd T = c_p \rho \dd V \dd T $$ $\Rightarrow$ heat conduction equation
$$ \dv{T}{t} - \frac{k}{\rho c_p} \dv[2]{T}{z} = - Q_s $$
:::
::: {.column width="50%"}
![](pics/heatCube.png)

:::
::::

## Instationary heat flow in 3D

$$ \pdv{T}{t} - \div a \grad T = \div q_s $$

* $a=\frac{k}{\rho c_p}$ [m²/s] thermal diffusivity - measure of heat transfer
* $k$ [W/m/K] thermal conductivity - measure of temperature transfer
* $c_p$ [J/kg/K] - heat capacity - measure of heat storage per mass
* $\rho$ (kg/m³) density

Water $k$=0.6 W/m/K, $\rho$=1000 kg/m³, $c$=4180 J/kg/K $\Rightarrow$ $a$=1.43e-7 m²/s

## Periodic boundary conditions

:::: {.columns}
::: {.column}
Upper boundary: daily/yearly variation

$$ T_0(t) = T_m + \Delta T \sin \omega t $$

$T_m$ mean temperature (e.g. 12°C), $\Delta T$ variation, e.g. 8°C

$\omega=2\pi/t_P$ daily ($T_d$=3600*24s) or yearly ($T_y=365 T_d$) cycle
:::
::: {.column}
```{python}
#| eval: true
#| echo: false
from math import sqrt, pi
import numpy as np
import matplotlib.pyplot as plt
```

```{python}
#| eval: true
#| echo: true
day = 3600 * 24
T0, dT = 12, 8
t = np.arange(100) / 50 * day
T = T0+dT*np.sin(t/day*2*np.pi)
plt.plot(t/day*24, T)
plt.xlabel("t (h)")
plt.ylabel("T (°C)")
plt.grid()
```
:::
::::

## Separation of variables

$$ \pdv{T}{t} = a\pdv[2]{T}{z} $$

$T(t, z)/\Delta T + T_0 = \theta(t) Z(z)$

$$ Z \pdv{\theta}{t} = a \theta \pdv[2]{Z}{z} $$

$$ \frac1\theta \pdv{\theta}{t} = C = a \frac{1}{Z}\pdv[2]{Z}{z} $$

## Solution 

regarding the BC $e^{\imath\omega t}$ leads to $C=\imath\omega$ and thus $\theta=\theta_0 e^{\imath\omega t}$

$$ \pdv[2]{Z}{z} - \imath \frac{\omega}{a} Z = \pdv[2]{Z}{z} + n^2 Z = 0  $$

Helmholtz equation with solution $Z=Z_0 e^{\imath n z}$ ($n^2=\imath\omega/a$)

$$ Z=Z_0 e^{\imath n z} = Z_0 e^{\sqrt{\imath\omega/a}z} = 
Z_0 e^{\sqrt{\omega/2a}(1+\imath)z} $$

$$ T(t, z)/\Delta T + T_0 = Z(z)\theta(t)=
Z_0\theta_0 e^{-\sqrt{\omega/2a}z} e^{i(\omega t-\sqrt{\omega/2a}z)} $$

## Interpretation

replacing the term $\sqrt{2a/\omega}=\sqrt{a t_P/\pi}=d$ leads to

$$ T(z, t) = T_0 + \Delta T e^{-z/d} \sin(\omega t - z/d) $$


* exponential damping of the temperature variation with decay depth $d$
* phase lag $z/d$ increases with depth, $z_\pi=\sqrt{2 a/\omega}\pi=\sqrt{a t_P \pi}$

1. Daily cycle: decay depth $d$=6cm, minimum depth=20cm
2. Yearly cycle: decay depth $d$=1.2m, minimum depth=4m

## Depth profiles

```{python}
#| output-location: column
#| code-line-numbers: false
#| echo: true
a = 1.5e-7
year = day*365
d = sqrt(a*year/pi)
t = np.arange(0, 1, 0.1) * year
z = np.arange(0, 6, 0.1)
fig, ax = plt.subplots()
for ti in t:
    Tz = np.exp(-z/d)*np.sin(ti*2*pi/year-
                             z/d) * dT + T0
    ax.plot(Tz, z, label="t={:.1f}".format(
        ti/year))

ax.invert_yaxis()
ax.legend()
ax.grid()
```

## Temporal behaviour
```{python}
#| output-location: column
#| code-line-numbers: false
#| echo: true
t = np.arange(0, 1.01, 0.01) * year
z = np.arange(0, 3, 0.4)
fig, ax = plt.subplots()
for zi in z:
    Tt = np.exp(-zi/d)*np.sin(t*2*pi/year-
                              zi/d) * dT + T0
    ax.plot(t/year*12, Tt, label=f"z={zi:.1f}")

ax.set_xlim(0, 12)
ax.set_xlabel("t (months)")
ax.set_ylabel("T (°C)")
ax.legend()
ax.grid()
```

## Experimental data from North Sea beach

![](pics/temperature2022-2023.svg)

<!-- ## Heat transfer in 1D
$$ \pdv{T}{t} - a \pdv[2]{T}{z} = 0 $$

with the periodic boundary conditions:
* $T(z=0,t)=T_0 + \Delta T \sin \omega t$ (daily/yearly cycle)
* $\pdv{T}{z}(z=z_1) = 0$ (no change at depth)
and the initial condition $T(z, t=0)=\sin \pi z$ has the analytical solution
$$ T(z, t) = \Delta T e^{-\pi^2 t} \sin \pi z $$ -->

## Explicit methods

$$ \pdv{T}{t} - a \pdv[2]{T}{z} = 0 $$

Finite-difference approximation

$$ \pdv{T}{t}^n \approx \frac{T^{n+1}-T^n}{\Delta t} = a \pdv[2]{T^n}{z} $$

## Explicit

:::: {.columns}
::: {.column}
Start $T^0$ with initial condition

Update field by 
$$ T^{n+1} = T^n + a \pdv[2]{T^n}{z} \cdot \Delta t$$

E.g. by using matrix $A$ from Poisson solver
:::
::: {.column}
```{python}
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "b-", lw=4)
ax.plot(2, 2, "ro", ms=12)
```
:::
::::


## Implicit methods

:::: {.columns}
::: {.column}
$$ \pdv{T}{t}^{n+1} \approx \frac{T^{n+1}-T^n}{\Delta t} = a \pdv[2]{T}{z} ^{n+1} $$

$$ \frac{1}{\Delta t} T^{n+1} - a \pdv[2]{T}{z} ^{n+1} = \frac{1}{\Delta t} T^n $$

$$ (\vb M - \vb A) \vb u^{n+1} = \vb M \vb u^n $$ 
:::
::: {.column}
```{python}
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [2, 2, 2], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "bo-", ms=12, lw=4)
ax.plot(2, 2, "ro", ms=12)
```
:::
::::

## Mixed - Crank-Nicholson method

$$ \pdv{T}{t}^{n+1/2} \approx \frac{T^{n+1}-T^n}{\Delta t} = \frac12 a \pdv[2]{T}{z} ^n + \frac12 a \pdv[2]{T}{z} ^{n+1} $$

:::: {.columns}
::: {.column}
$$ \frac{2}{\Delta t} T^{n+1} - a \pdv[2]{T^{n+1}}{z} = 
   \frac{2}{\Delta t} T^n + a \pdv[2]{T^n}{z} $$

$$ (2\vb M - \vb A) \vb u^{n+1} = (2\vb M + \vb A) \vb u^n $$ 

<!-- $$ \pdv{T}{t}^n \approx \frac{T^{n+1}-T^n}{\Delta t} = \frac12 a \pdv[2]{T}{z} ^n + \frac12 a \pdv[2]{T}{z} ^{n+1} $$ -->
:::
::: {.column}
```{python}
#| eval: true
#| echo: false

import numpy as np
import matplotlib.pyplot as plt
import pygimli as pg
import pygimli.meshtools as mt
grid = mt.createGrid(5, 4)
ax, cb = pg.show(grid)
ax.set_yticks([])
ax.plot([1, 2, 3], [1, 1, 1], "bo-", ms=12, lw=4)
ax.plot([1, 2, 3], [2, 2, 2], "bo-", ms=12, lw=4)
ax.plot([2, 2], [1, 2], "bo-", ms=12, lw=4)
ax.plot(2, 2, "ro", ms=12)
```
:::
::::